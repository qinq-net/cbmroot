##############################################################################
# Class:   TMbsMappingTofPar
# Context: TestDefaultContext
##############################################################################
[TMbsMappingTofPar]
//----------------------------------------------------------------------------
// Switch ON/OFF debug tests, output & histos in mapping
MappingDebug: Int_t       1
//----------------------------------------------------------------------------
// => If mapping detector channel for each TDC channel
// Nb of TDC mapped (1)
NbMappedTdc: Int_t       88
// Nb of channels per TDC (2)
// Number of entries HAS TO match the number of TDCs in (1)
// 0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31
NbChanTdc: Int_t \
   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4\
   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4\
   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   
// TDC Unique ID (aka 1st channel rising edge ID)
// Number of entries HAS TO match the number of TDCs in (1)
// 0x10000000 = edge         = edge, 0 = Rising, 1 = Falling
// 0x0FFF0000 = Channel ID   = TDC Channel index, always 0 here as first channel index!
// 0x0000FFF0 = TDC ID       = TDC index, 0-4096
// 0x0000000F = TDC type     = cf TofTdcDef.h, 1 = Caen, 2 = VFTX, 3 = TRB3, 4 = GET4
// List of all addresses in order: 3*8 GET4s, 1*8 unused, 4*8 not available, 3*8 GET4s => 11*8 in total
//       0          1          2          3          4          5          6          7          8          9         10         11
TdcUniqueId: Int_t \
0x00000004 0x00000014 0x00000024 0x00000034 0x00000044 0x00000054 0x00000064 0x00000074 \ 0
0x00000084 0x00000094 0x000000A4 0x000000B4 0x000000C4 0x000000D4 0x000000E4 0x000000F4 \ 1
0x00000104 0x00000114 0x00000124 0x00000134 0x00000144 0x00000154 0x00000164 0x00000174 \ 2
0x00000184 0x00000194 0x000001A4 0x000001B4 0x000001C4 0x000001D4 0x000001E4 0x000001F4 \ -
0x00000204 0x00000214 0x00000224 0x00000234 0x00000244 0x00000254 0x00000264 0x00000274 \ x
0x00000284 0x00000294 0x000002A4 0x000002B4 0x000002C4 0x000002D4 0x000002E4 0x000002F4 \ x
0x00000304 0x00000314 0x00000324 0x00000334 0x00000344 0x00000354 0x00000364 0x00000374 \ x
0x00000384 0x00000394 0x000003A4 0x000003B4 0x000003C4 0x000003D4 0x000003E4 0x000003F4 \ x
0x00000404 0x00000414 0x00000424 0x00000434 0x00000444 0x00000454 0x00000464 0x00000474 \ 3
0x00000484 0x00000494 0x000004A4 0x000004B4 0x000004C4 0x000004D4 0x000004E4 0x000004F4 \ 4
0x00000504 0x00000514 0x00000524 0x00000534 0x00000544 0x00000554 0x00000564 0x00000574   5
// TDC to Detector Mapping: for each tdc channel provides the Detector Unique ID to use
// Formatting: 1 line per TDC, total nb of entries has to match the sum of (2)
// Use 0xFFFFFFFF for unassigned channels
// Detectors Unique ID
// 0xFF000000 = Channel ID   = 0 for 1st channel 1st side
// 0x00800000 = Channel Side = 0 for 1st channel 1st side
// 0x007F0000 = RPC ID       = or detector ID
// 0x0000F000 = SM Type      = e.g. 0 for HD, 1 for Buc, 2 for plastics, 3 for Pad CRPC, 4 for reference signal 1 & 2, 5 for HD Big RPC, 6 for Buc multiple...
// 0x00000FF0 = SM ID        = e.g. 0 for HD, 1 for Buc, 2 for plastics, 3 for Pad CRPC, 4 for reference signal 1 & 2, 5 for HD Big RPC, 6 for Buc multiple ...
// 0x0000000F = System ID    = always 6 for TOF
// e.g: 1st Ch left Buc RPC = 0x00001016, 1st ch left HD RPC = 0x00000006, 1st plastic left = 0x00002026, 2nd plastic left = 0x00012026, Reference = 0x00004046
// from cbmroot/development/tofgroup/unpack/tof/mapping/TMbsMappingTofPar.cxx
//const Int_t TMbsMappingTofPar::fgkiNbChDetType[fgkiNbDetType] =
// SmType               0     1     2     3     4     5     6     7     8     9    10
//                     P3   Ref   PLA    P2    P5   Dia  2013  USTC   PAD   TsgStr  2012
//                      |     |     |     |     |     |     |     |     |     |     |
//                 {   56,   72,    1,   32,   16,   16,   64,   16,   8,   16,    8 };
// nb                   0     1     ?     1     1     2     1     1   3?     0     1
//       0          1          2          3          4          5          6          7          8          9         10         11         12         13         14         15         16         17         18         19         20         21         22         23         24         25         26         27         28         29         30         31
// 1. Tower: TDC11: USTC, TDC12: HD-REF, TDC13: HD-P2-bottom, TDC14: HD-P2-top
//           TDC21: PAD-first , TDC22: TsgStr-bottom, TDC23: PAD-second, TDC24: TsgStr-top
// 2. Tower: TDC31: not in use , TDC32: not in use , TDC33: not in use , TDC34: not in use
//           TDC41: BUC-REF-right-bottom, TDC42: BUC-REF-left-bottom, TDC43: BUC-REF-right-top, TDC44: BUC-REF-left-top   (left was defined as the upper, right as the lower group of channel-blocks)
// 3. Tower: TDC51: 2013-right-top, TDC52: , TDC53: 2013-right-bottom, TDC54:         (left was defined as the upper, right as the lower group of channel-blocks)
//           TDC61: 2013-left-top , TDC62: , TDC63: 2013-left-bottom , TDC64:         (left was defined as the upper, right as the lower group of channel-blocks)
Mapping: Int_t \
0x00803006 0x01803006 0x02803006 0x03803006 0x04803006 0x05803006 0x06803006 0x07803006 0x08803006 0x09803006 0x0A803006 0x0B803006 0x0C803006 0x0D803006 0x0E803006 0x0F803006 0x0F003006 0x0E003006 0x0D003006 0x0C003006 0x0B003006 0x0A003006 0x09003006 0x08003006 0x07003006 0x06003006 0x05003006 0x04003006 0x03003006 0x02003006 0x01003006 0x00003006 \
0x10803006 0x11803006 0x12803006 0x13803006 0x14803006 0x15803006 0x16803006 0x17803006 0x18803006 0x19803006 0x1A803006 0x1B803006 0x1C803006 0x1D803006 0x1E803006 0x1F803006 0x1F003006 0x1E003006 0x1D003006 0x1C003006 0x1B003006 0x1A003006 0x19003006 0x18003006 0x17003006 0x16003006 0x15003006 0x14003006 0x13003006 0x12003006 0x11003006 0x10003006 \
0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0x00809006 0x01809006 0x02809006 0x03809006 0x04809006 0x05809006 0x06809006 0x07809006 0x07009006 0x06009006 0x05009006 0x04009006 0x03009006 0x02009006 0x01009006 0x00009006 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF \ 
0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF \
0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF \
0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF \
0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF \
0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF \
0x08809006 0x09809006 0x0A809006 0x0B809006 0x0C809006 0x0D809006 0x0E809006 0x0F809006 0x10809006 0x11809006 0x12809006 0x13809006 0x14809006 0x15809006 0x16809006 0x17809006 0x17009006 0x16009006 0x15009006 0x14009006 0x13009006 0x12009006 0x11009006 0x10009006 0x0F009006 0x0E009006 0x0D009006 0x0C009006 0x0B009006 0x0A009006 0x09009006 0x08009006 \
0x0F807006 0x0E807006 0x0D807006 0x0C807006 0x0B807006 0x0A807006 0x09807006 0x08807006 0x07807006 0x06807006 0x05807006 0x04807006 0x03807006 0x02807006 0x01807006 0x00807006 0x00007006 0x01007006 0x02007006 0x03007006 0x04007006 0x05007006 0x06007006 0x07007006 0x08007006 0x09007006 0x0A007006 0x0B007006 0x0C007006 0x0D007006 0x0E007006 0x0F007006 \
0x0F004006 0x0E004006 0x00804006 0x0C004006 0x00804006 0x0A004006 0x09004006 0x08004006 0x07004006 0x06004006 0x05004006 0x04004006 0x03004006 0x02004006 0x01004006 0x00004006 0x00804006 0x01804006 0x02804006 0x03804006 0x04804006 0x05804006 0x06804006 0x07804006 0x08804006 0x09804006 0x0A804006 0x0B804006 0x0C804006 0x0D804006 0x0E804006 0x0F804006
// Use extended Digis: Time and Tot stored as double
// while "normal" digis rebin both to make them fit together in a single 32b integer
UseExtDigi: Int_t          1
// Nb of Detectors mapped (3)
NbMappedDet: Int_t       18
// Detectors Unique ID (aka 1st channel left side ID)
// Number of entries HAS TO match the number of Detectors in (3)
DetUniqueId: Int_t \
0x00003006 0x00001006 0x00002006 0x00002016 0x00002026 0x00002036 0x00004006 0x00005006 0x00005016 0x00006006 0x00007006 0x00009006 0x00008006 0x00018006 0x00028006 0x00038006 0x00048006 0x00058006
#################################################################################################################################### 
