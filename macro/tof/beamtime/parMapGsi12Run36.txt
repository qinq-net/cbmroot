##############################################################################
# Class:   TMbsMappingTofPar
# Context: TestDefaultContext
##############################################################################
[TMbsMappingTofPar]
//----------------------------------------------------------------------------
// Switch ON/OFF debug tests, output & histos in mapping
MappingDebug: Int_t            0
//----------------------------------------------------------------------------
// => If mapping TDC channel for each detector channel
// Nb of detectors
//NbDetectors: Int_t           4
// Nb of channels per detector
// Number of entries HAS TO match the number of detectors
// 0   1   2   3   4   5   6   7   8   9  10  11
//NbChanDet: Int_t \
//  32  72   1   1
// Detectors Unique ID (aka 1st channel 1st side ID)
// 0xFF000000 = Channel ID   = 0 for 1st channel 1st side
// 0x00800000 = Channel Side = 0 for 1st channel 1st side
// 0x007F0000 = RPC ID       = or detector ID
// 0x0000F000 = SM Type      = e.g. 0 for HD, 1 for Buc, 2 for plastics, 3 for Pad CRPC, ...
// 0x00000FF0 = SM ID        = e.g. 0 for HD, 1 for Buc, 2 for plastics, 3 for Pad CRPC, ...
// 0x0000000F = System ID    = always 6 for TOF
//       0          1          2          3          4          5          6          7
//DetUniqueId: Int_t \
//0x00000006 0x00001016 0x00002026 0x00012026 
//----------------------------------------------------------------------------
// => If mapping detector channel for each TDC channel
// Nb of TDC mapped (1)
NbMappedTdc: Int_t          10
// Nb of channels per TDC (2)
// Number of entries HAS TO match the number of TDCs in (1)
// 0   1   2   3   4   5   6   7   8   9  10  11
NbChanTdc: Int_t \
  28  28  28  28  28  28  28  28  28  28
// TDC Unique ID (aka 1st channel rising edge ID)
// Number of entries HAS TO match the number of TDCs in (1)
// 0x10000000 = edge         = edge, 0 = Rising, 1 = Falling
// 0x0FFF0000 = Channel ID   = TDC Channel index, always 0 here as first channel index!
// 0x0000FFF0 = TDC ID       = TDC index, 0-4096
// 0x0000000F = TDC type     = cf TofTdcDef.h, 1 = Caen, 2 = VFTX, 3 = TRB3, 4 = GET4
//       0          1          2          3          4          5          6          7          8          9         10         11
TdcUniqueId: Int_t \
0x00000002 0x00000012 0x00000022 0x00000032 0x00000042 0x00000052 0x00000062 0x00000072 0x00000082 0x00000092
// TDC to Detector Mapping: for each tdc channel provides the Detector Unique ID to use
// Formatting: 1 line per TDC, total nb of entries has to match the sum of (2)
// Use 0xFFFFFFFF for unassigned channels
// Detectors Unique ID
// 0xFF000000 = Channel ID   = 0 for 1st channel 1st side
// 0x00800000 = Channel Side = 0 for 1st channel 1st side
// 0x007F0000 = RPC ID       = or detector ID
// 0x0000F000 = SM Type      = e.g. 0 for HD, 1 for Buc, 2 for plastics, 3 for Pad CRPC, 4 for reference signal 1 & 2, 5 for HD Big RPC, 6 for Buc multiple...
// 0x00000FF0 = SM ID        = e.g. 0 for HD, 1 for Buc, 2 for plastics, 3 for Pad CRPC, 4 for reference signal 1 & 2, 5 for HD Big RPC, 6 for Buc multiple ...
// 0x0000000F = System ID    = always 6 for TOF
// e.g: 1st Ch left Buc RPC = 0x00001016, 1st ch left HD RPC = 0x00000006, 1st plastic left = 0x00002026, 2nd plastic left = 0x00012026, Reference = 0x00004046
//       0          1          2          3          4          5          6          7          8          9         10         11         12         13         14         15         16         17         18         19         20         21         22         23         24         25         26         27
Mapping: Int_t \
0x47001016 0x46001016 0x45001016 0x44001016 0x43001016 0x42001016 0x41001016 0x40001016 0x40801016 0x41801016 0x42801016 0x43801016 0x44801016 0x45801016 0x46801016 0x47801016 0x17001016 0x16001016 0x15001016 0x14001016 0x13001016 0x12001016 0x11001016 0x10001016 0xFFFFFFFF 0x00004046 0xFFFFFFFF 0x00804046 \
0x3F001016 0x3E001016 0x3D001016 0x3C001016 0x3B001016 0x3A001016 0x39001016 0x38001016 0x38801016 0x39801016 0x3A801016 0x3B801016 0x3C801016 0x3D801016 0x3E801016 0x3F801016 0x10801016 0x11801016 0x12801016 0x13801016 0x14801016 0x15801016 0x16801016 0x17801016 0xFFFFFFFF 0x01004046 0xFFFFFFFF 0x01804046 \
0x37001016 0x36001016 0x35001016 0x34001016 0x33001016 0x32001016 0x31001016 0x30001016 0x30801016 0x31801016 0x32801016 0x33801016 0x34801016 0x35801016 0x36801016 0x37801016 0x0F001016 0x0E001016 0x0D001016 0x0C001016 0x0B001016 0x0A001016 0x09001016 0x08001016 0xFFFFFFFF 0x02004046 0xFFFFFFFF 0x02804046 \
0x2F001016 0x2E001016 0x2D001016 0x2C001016 0x2B001016 0x2A001016 0x29001016 0x28001016 0x28801016 0x29801016 0x2A801016 0x2B801016 0x2C801016 0x2D801016 0x2E801016 0x2F801016 0x08801016 0x09801016 0x0A801016 0x0B801016 0x0C801016 0x0D801016 0x0E801016 0x0F801016 0xFFFFFFFF 0x03004046 0xFFFFFFFF 0x03804046 \
0x27001016 0x26001016 0x25001016 0x24001016 0x23001016 0x22001016 0x21001016 0x20001016 0x20801016 0x21801016 0x22801016 0x23801016 0x24801016 0x25801016 0x26801016 0x27801016 0x07001016 0x06001016 0x05001016 0x04001016 0x03001016 0x02001016 0x01001016 0x00001016 0xFFFFFFFF 0x04004046 0xFFFFFFFF 0x04804046 \
0x1F001016 0x1E001016 0x1D001016 0x1C001016 0x1B001016 0x1A001016 0x19001016 0x18001016 0x18801016 0x19801016 0x1A801016 0x1B801016 0x1C801016 0x1D801016 0x1E801016 0x1F801016 0x00801016 0x01801016 0x02801016 0x03801016 0x04801016 0x05801016 0x06801016 0x07801016 0xFFFFFFFF 0x05004046 0xFFFFFFFF 0x05804046 \
0x10800006 0x11800006 0x12800006 0x13800006 0x14800006 0x15800006 0x16800006 0x17800006 0x18800006 0x19800006 0x1A800006 0x1B800006 0x1C800006 0x1D800006 0x1E800006 0x1F800006 0x00002026 0x00802026 0x00012026 0x00812026 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0x06004046 0x06804046 0xFFFFFFFF \
0x00800006 0x01800006 0x02800006 0x03800006 0x04800006 0x05800006 0x06800006 0x07800006 0x08800006 0x09800006 0x0A800006 0x0B800006 0x0C800006 0x0D800006 0x0E800006 0x0F800006 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0x07004046 0xFFFFFFFF 0x07804046 \
0x1F000006 0x1E000006 0x1D000006 0x1C000006 0x1B000006 0x1A000006 0x19000006 0x18000006 0x17000006 0x16000006 0x15000006 0x14000006 0x13000006 0x12000006 0x11000006 0x10000006 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0x08004046 0xFFFFFFFF 0x08804046 \
0x0F000006 0x0E000006 0x0D000006 0x0C000006 0x0B000006 0x0A000006 0x09000006 0x08000006 0x07000006 0x06000006 0x05000006 0x04000006 0x03000006 0x02000006 0x01000006 0x00000006 0x00003036 0x01003036 0x02003036 0x03003036 0x04003036 0x05003036 0x06003036 0x07003036 0xFFFFFFFF 0x09004046 0xFFFFFFFF 0x09804046
// Use extended Digis: Time and Tot stored as double
// while "normal" digis rebin both to make them fit together in a single 32b integer
UseExtDigi: Int_t            1
// Nb of Detectors mapped (3)
NbMappedDet: Int_t           5
// Detectors Unique ID (aka 1st channel left side ID)
// Number of entries HAS TO match the number of Detectors in (3)
DetUniqueId: Int_t \
0x00001016 0x00000006 0x00002026 0x00012026 0x00004046
########################### 
