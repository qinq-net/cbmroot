#ifndef ROC_DEFINES_GET4_V1_X_H
#define ROC_DEFINES_GET4_V1_X_H

/*
 * 32 bit, readonly.
 * This address returns the hardware version of the GET4 frontend module.
 */
#define ROC_GET4_HWV                 0x500000

/*
 * 1 bit, readonly.
 * This address returns “1” if radiation mitigation techniques are present
 * in the module and “0” elsewise.
 */
#define ROC_GET4_RADTOL              0x500004


/*
 * 8 bit, readonly.
 * This address returns the number of ports available in the firmware for
 * connecting GET4 chips.
 */
#define ROC_GET4_NR_OF_GET4S         0x500008


/*
 * 0 bit, writeonly.
 * This will reset the control logic in the GET4 frontend module.
 *
 */
#define ROC_GET4_RESET               0x500010

/*
 * 1 bit, writeonly.
 * This will reset the data path logic in the GET4 frontend module.
 * Note that there might be some FIFOs in the communication module that are not reset.
 * A clean FIFO reset requires the ROC to be in the state ”DAQ-Stopped”.
 */
#define ROC_GET4_FIFO_RESET          0x500014

/*
 * 0 bit, writeonly.
 * This will reset the time stamp counter (156 MHz and 250 MHz) in the GET4 frontend module.
 *
 */
#define ROC_GET4_TS_RESET            0x500018

/*
 * 32 bit, readonly.
 * With this commands the 48 bit wide data fifo can be read out over the control path.
 * The control path has only 32 bit wide data words. So for the readout of two 48 bit words
 * there are three read commands specified.
 */
#define ROC_GET4_BURST1              0x500100
#define ROC_GET4_BURST2              0x500104
#define ROC_GET4_BURST3              0x500108

/*
 * 32 bit, read/write.
 * For each GET4 chip one can specify if the serial data will be sampled on the rising edge
 * or on the falling edge of the serial clock.
 * The default is sampling on the rising edge.
 */
#define ROC_GET4_SAMPLE_FALLING_EDGE_LSBS 0x500200


/*
 * 1 bit, read/write.
 * If this bit is set, there are epoch markers derived from the 250 MHz clock inserted in the
 * datastream. This is important when synchronizing the GET4 data to data from non-GET4-frontends.
 * Per default this register is set.
 */
#define ROC_GET4_EPOCH250_EN         0x500204


/*
 * 32 bit, read/write.
 * For each channel one can specify whether 156MHz epoch markers should be withhold if no hit was
 * detected during the corresponding epoch.
 * Suppressing markers of empty epochs might drastically reduce the data volume in low rate
 * experiments, however full epoch information might be useful for debugging and consistency
 * checks. By default epoch marker suppression is turned off on all channels.
 */
#define ROC_GET4_SUPRESS_EPOCHS_LSBS 0x500208


/*
 * 2 bit, read/write.
 * The 2 bit register is used to configure the incoming data rate.
 * This should match the configuration of the GET4s (see GET4 documentation).
 * The following values are available:
 * "11" => 156.25 MHz
 * "10" =>  78.13 MHz
 * "01" =>  39.06 MHz
 * "00" =>  19.53 MHz (default)
 */
#define ROC_GET4_RECEIVE_CLK_CFG     0x50020C


/*
 * 32 bit, read/write.
 * The 32 bit register is used to unmask incoming data from the GET4 chips.
 * If this register holds the value 0x 0000 0001, only data from the first GET4 will be sampled.
 * A value of 0x FFFF FFFF will sample on every data port.
 * One should only activate ports with a connected GET4 chip since unconnected LVDS lines tend to
 * toggle unpredictably.
 * The default is 0x 0000 0000, all ports are disabled.
 */
#define ROC_GET4_RECEIVE_MASK_LSBS   0x501000


/*
 * 32 bit, read/write.
 * The 32 bit register is used to unmask outgoing control messages to the GET4 chips.
 * If this register holds the value 0x 0000 0001, the commands send to ROC GET4 CMD TO GET4 will
 * only be passed to GET4 number 1.
 * A value of 0x FFFF FFFF can be used to address to every connected GET4 simultaneously, this is
 * also the default.
 */
#define ROC_GET4_TRANSMIT_MASK_LSBS  0x501004


/*
 * 32 bit, read/write.
 * The 32 bit register is used to unmask the outputs of the data generator.
 * If this register holds the value 0x 0000 0001, data will be available on date generator output 0.
 * A value of 0x FFFF FFFF can be used to generate data on all 24 outputs.
 * If ROC GET4 DATAGEN EN is set, these outputs will be connected to the data receivers instead of
 * data from the GET4s.
 */
#define ROC_GET4_DATAGEN_MASK        0x501008


/*
 * 32 bit, read/write.
 * The 32 bit register can be used to shape the data that is generated by the data generator.
 * When the data generator is enabled, the register is shifted left and the MSB is used as LSB (circular
 * shift register). So every 32 serial data clock cycles the pattern is repeated. The MSB is connected
 * to the (unmasked) outputs of the data generator.
 */
#define ROC_GET4_DATAGEN_INIT        0x50100C


/*
 * 1 bit, writeonly.
 * This enables/disables the data generator.
 * When the data generator is enabled, ROC GET4 DATAGEN INIT and ROC GET4 DATAGEN MASK cannot be updated
 * but the old values are used until the data generator is disabled.
 */
#define ROC_GET4_DATAGEN_EN          0x501010


/*
 * 32 bit, writeonly.
 * The GET4 chip has a 32 bit wide control interface.
 * The 32 bit that are written to this address will be passed to the GET4s enabled by the
 * ROC_GET4_TRANSMIT_MASK register.
 */
#define ROC_GET4_CMD_TO_GET4         0x510000

/*
 * 1 bit, read/write.
 * This selects the GET4 readout mode:
 *  - 0 selects the original 24 bits mode.
 *  - 1 selects the new 32 bits mode (hack or true)
 */
#define ROC_GET4_READOUT_MODE        0x5F0000

#endif // ROC_DEFINES_GET4_V1_X_H
